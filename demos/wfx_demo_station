#!/bin/bash
# Copyright (c) 2018, Silicon Laboratories
# See license terms contained in COPYING file

# Start a demo in station mode for browsing

set -e
. wfx_set_env
check_root

# Print command passed as argument, execute it and die if command fail
# If first argument is '-n', print command, but do not execute it. Use it if
# your command contains variable that you don't want to show full content to
# user. For example:
#     run -n export PATH=\"$DIR:\$PATH\"
#     export PATH="$DIR:$PATH"
# If first argument is '-i', ignore return value for command
run() {
    local IGNORE_RUN IGNORE_ERR
    [ "$1" = -n ] && IGNORE_RUN=1 && shift
    [ "$1" = -i ] && IGNORE_ERR=1 && shift
    if [ -z "$INHIBIT_ANSI_COLORS" ]; then
        echo "[1m\$ $*[0m" >&2
    else
        echo "\$ $*" >&2
    fi
    [ -n "$IGNORE_RUN" ] && return 0
    "$@"
    RET=$?
    [ -n "$IGNORE_ERR" ] && return $RET
    [ $RET -eq 0 ] || die "$1 returned $RET"
}

INTERFACE="wlan0"
WPA_SUPPLICANT_CONF=$GITHUB_CONF_PATH/wpa_supplicant.conf
LIGHTTPD_CONF=$GITHUB_CONF_PATH/lighttpd.conf

check_interface "$INTERFACE"

# Ensure that all processes from a previous run are stopped
wfx_demo_stop

# Tell dhcpcd to control WLAN interface (in case of previous demo_AP)
run ip addr flush dev "$INTERFACE"
run dhcpcd --rebind "$INTERFACE"

# Start wpa_supplicant
run wpa_supplicant -i "$INTERFACE" -c "$WPA_SUPPLICANT_CONF" -B -s

# Start web server
run lighttpd -f "$LIGHTTPD_CONF"

if [[ $# -gt 0 ]]; then
    # Configure wpa_supplicant manually
    run wpa_cli flush
    run wpa_cli add_network
    run -n wpa_cli set_network 0 ssid \\\"$1\\\"
    wpa_cli set_network 0 ssid \"$1\"
    if [[ $# -gt 1 ]]; then
        run -n wpa_cli set_network 0 psk \\\"$2\\\"
        wpa_cli set_network 0 psk \"$2\"
        run wpa_cli set_network 0 key_mgmt WPA-PSK
    else
        run wpa_cli set_network 0 key_mgmt NONE
    fi
    run wpa_cli enable_network 0
    run wpa_cli select_network 0
else
    # Configure wpa_supplicant using wpa_gui
    if [[ -n "$DISPLAY" ]]; then
        sudo -u pi wpa_gui & disown
    else
        echo "ERROR: no config provided and wpa_gui needs a display" >&2
        exit 1
    fi
fi
echo "Success"
