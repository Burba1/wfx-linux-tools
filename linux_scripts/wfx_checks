#!/bin/bash
# Copyright (c) 2018, Silicon Laboratories
# See license terms contained in COPYING file

. wfx_colors
. wfx_set_env

# Tracing all active lines in /boot/config.txt
config=$( cat /boot/config.txt  | grep -v ^# | grep -v ^$)
if [ -n "${config}" ]; then 
	echo "Current configuration"
	for line in ${config[$@]}
		do
			echo " $line"
		done
	echo ""
fi

if [ $(id -u) != 0 ]; then
	echo "  (please run this script as root to get more detailed info)" >&2
fi

kernel=$(uname -r)

echo "System:   $(cat /sys/firmware/devicetree/base/model | tr -d '\0' )"
echo "System:   Linux kernel $kernel"

wfx_drv_dir=/lib/modules/$kernel/extra
wfx_drv_file=/lib/modules/$kernel/extra/wfx.ko
wfx_fw_base=/lib/firmware/wfm_wf200.sec
wfx_pds_base=/lib/firmware/wf200.pds
wfx_conf=/etc/modprobe.d/wfx.conf
wfx_spi_overlay=/boot/overlays/wfx-spi.dtbo
wfx_sdio_overlay=/boot/overlays/wfx-sdio.dtbo
WFX_DRIVER=wfx

# if using symbolic links, use the links, otherwise use the files
wfx_drv_dir_link=$(readlink $wfx_drv_dir)
wfx_drv_module=${wfx_drv_dir_link}/${WFX_DRIVER}.ko

wfx_fw_link=$(readlink $wfx_fw_base)
if [ -n "$wfx_fw_link" ]; then
	wfx_fw_file=$(ls $wfx_fw_base)
else
	wfx_fw_file=$wfx_fw_base
fi

wfx_pds_link=$(readlink $wfx_pds_base)
if [ -n "$wfx_pds_link" ]; then
	wfx_pds_file=$(ls $wfx_pds_base)
else
	wfx_pds_file=$wfx_pds_base
fi

if [ -f $wfx_conf ]; then
	wfx_power_mode_option=$(cat $wfx_conf | grep ^options | grep power_mode)
else
	wfx_power_mode_option="not set (in ${wfx_conf} file)"
fi

missing_files=0
startup_errors=0

SDIO_overlay=$(cat /boot/config.txt | grep ^dtoverlay= | grep wfx-sdio)
SPI_overlay=$(cat /boot/config.txt | grep ^dtoverlay= | grep wfx-spi)

# Check if WFX driver is blacklisted
WFX_blacklisted=$(cat /etc/modprobe.d/raspi-blacklist.conf | grep ^blacklist | grep wfx)
if [ -z "$SDIO_blacklisted" ]; then
	WFX_Driver_blacklisted=0
else
	WFX_Driver_blacklisted=1
	echo "User:     WFX Driver blacklisted      (The driver must be loaded using 'sudo wfx_reload')"
fi

# SDIO test: check if SDIO overlay is enabled in /boot/config.txt
if [ -z "$SDIO_overlay" ]; then
	WFX_SDIO_Overlay_enabled=0
else
	WFX_SDIO_Overlay_enabled=1
	echo "User:     WFX SDIO overlay enabled         (in /boot/config.txt)"
fi

# SPI test: check if SPI overlay is enabled in .boot/config.txt
if [ -z "$SPI_overlay" ]; then
	WFX_SPI_Overlay_enabled=0
else
	WFX_SPI_Overlay_enabled=1
	echo "User:     WFX SPI overlay enabled          (in /boot/config.txt)"
fi

if [ ${WFX_SDIO_Overlay_enabled} == 1 ] && [ ${WFX_SPI_Overlay_enabled} == 1 ]; then
	printf "Setup:    ${RED}Error: both overlays are enabled.${NO}   ${INV}Use 'sudo wfx_<sdio/spi>_<auto/manual>' to select the bus and mode ${NO}\n"
fi

if [ ${WFX_SDIO_Overlay_enabled} == 0 ] && [ ${WFX_SPI_Overlay_enabled} == 0 ]; then
	printf "Setup:    ${RED}Error: No SDIO/SPI overlay enabled.${NO}   ${INV}Use 'sudo wfx_<sdio/spi>_<auto/manual>' to select the bus and mode ${NO}\n"
fi

if [ ! -d /proc/device-tree/hat ]; then
	if  grep -q '^dtparam=i2c_vc=on' /boot/config.txt; then
		printf "Startup   ${RED}Error: Cannot identify board, /proc/device-tree/hat/ does not exist.${NO} ${INV}Empty eeprom?${NO}\n" >&2
	else
		printf "Setup:    ${RED}Error: Startup Cannot identify board, 'dtparam=i2c_vc=on' is not present in /boot/config.txt.${NO}\n" >&2
	fi
fi

mmc=$(dmesg | grep "new high speed SDIO card")
if [ "$WFX_SDIO_Overlay_enabled" = 1 ]; then
	# Check if SDIO overlay is present
	if [ -f $wfx_sdio_overlay ]; then
		echo "Setup:    $wfx_sdio_overlay file present"
	else
		printf "Setup:    ${RED}Error: $wfx_sdio_overlay file missing${NO}   ${INV}This file should be available under ${GITHUB_TOOLS_PATH}/linux_overlays${NO}\n"
		missing_files=$(( $missing_files + 1 ))
	fi
	# Check if SDIO has been detected at boot
	if [ -n "$mmc" ]; then
		echo "Startup:  SDIO Part detected at boot       ($mmc)"
	else
		printf "Startup:  ${RED}Error: No part detected at boot on SDIO bus!${NO}   ${INV}Is there an EVB attached to the Pi, with the bus selection switch set to 'SDIO'?${NO}\n"
		printf "          ${NO}(You may need to reboot the Pi if you changed the bus selection)${NO}\n"
		IFS=$'\n' mmc1=($( dmesg | grep mmc1 ))
		if [ -n "$mmc1" ]; then
			echo "Startup:  mmc1 activity:"
			for line in "${mmc1[@]}"
			do
				echo "            $line"
			done
		fi
		startup_errors=$(( $startup_errors + 1 ))
	fi
fi

if [ "$WFX_SPI_Overlay_enabled" = 1 ]; then
	# Check if SPI overlay is present
	if [ -f $wfx_spi_overlay ]; then
		echo "Setup:    $wfx_spi_overlay file present"
	else
		printf "Setup:    ${RED}Error: $wfx_spi_overlay file missing${NO}   ${INV}This file should be available under ${GITHUB_TOOLS_PATH}/linux_overlays${NO}\n"
		missing_files=$(( $missing_files + 1 ))
	fi
fi

IFS=$'\n' loading=($( vcdbg log msg 2>&1  | grep 'Loading' ))
if [ -n "$loading" ]; then
	echo "Startup:  loaded system files:"
	for line in "${loading[@]}"
	do
		echo "            $line"
	done
fi

IFS=$'\n' loaded_dtbos=($( vcdbg log msg 2>&1  | grep '.dtbo' ))
if [ -n "$loaded_dtbos" ]; then
	echo "Startup:  device tree overlay files:"
	for dtbo in "${loaded_dtbos[@]}"
	do
		echo "            $dtbo"
	done
fi

IFS=$'\n' loaded_overlays=($( vcdbg log msg 2>&1  | grep 'Loaded overlay' ))
if [ -n "$loaded_overlays" ]; then
	echo "Startup:  loaded overlays:"
	for overlay in "${loaded_overlays[@]}"
	do
		echo "            $overlay"
	done
fi

IFS=$'\n' dtparams=($( vcdbg log msg 2>&1  | grep 'dtparam:' ))
if [ -n "$dtparams" ]; then
	echo "Startup:  dtparams:"
	for param in "${dtparams[@]}"
	do
		echo "            $param"
	done
fi

# Check WFx driver modules existence
if [ -z "$wfx_drv_module" ]; then
	missing_files=$(( $missing_files + 1 ))
	printf "Setup:    ${RED}Error: Missing WFX driver   ($wfx_drv_base_link)${RED}   ${INV}You need to check you WFX driver installation! Make sure you have the $WFX_DRIVER file!${NO}\n"
else
	echo "Setup:    WFX driver        $wfx_drv_module ($wfx_drv_dir/wfx.ko)"
	wfx_version=$(modinfo wfx  | grep -E "^version")
	if [ "${wfx_version}" != "" ]; then
		echo "Setup:    WFX driver        $wfx_version (from 'modinfo wfx')"
	else
		printf "Setup:    ${RED}Error: No result from 'modinfo wfx'${NO}   ${INV}The modules dependencies may not be up to date. Use 'sudo depmod -a' to solve this!${NO}\n"
	fi
fi

if [ -z "$wfx_fw_file" ]; then
	missing_files=$(( $missing_files + 1 ))
	printf "Setup:    ${RED}Error: Missing WFX FW file driver ($wfx_fw_file)${NO}\n"
	printf "                 You need to check you WFX driver installation! Make sure you have the $wfx_fw_file file!\n"
fi

if [ -z "$wfx_pds_file" ]; then
	missing_files=$(( $missing_files + 1 ))
	printf "Setup:    ${RED}Error: Missing WFX FW file driver ($wfx_pds_file)${NO}"
	printf "                 You need to check you WFX driver installation! Make sure you have the $wfx_pds_file file!\n"
fi

if [ -n "$wfx_fw_file" ]; then
	echo "Setup:    WFX Firmware      $wfx_fw_link ($wfx_fw_base)"
fi

if [ -n "$wfx_pds_file" ]; then
	echo "Setup:    WFX PDS           $wfx_pds_link ($wfx_pds_base)"
fi

if [ -n "$wfx_power_mode_option" ]; then
	echo "User:     WFX Power mode    $wfx_power_mode_option"
fi

if [ $missing_files -gt 0 ]; then
	printf "Setup:    ${RED}ERROR: There are $missing_files missing file(s)!${NO}\n"
	printf "           Check your installation based on the above recommendations, and try again.\n"
	printf "           It may be worth using 'sudo halt' (to make sure any change is saved),\n"
	printf "           waiting for the activity led to stop blinking, then power-cycling the Pi.\n"
	exit 1
else
	# Check if driver has already been loaded
	wfx_driver_loaded=$(dmesg | grep "wfx: Silicon Labs")
	if [ -n "$wfx_driver_loaded" ]; then
		echo "Startup:  Driver loaded ($wfx_driver_loaded)"
		wfx_loading=$(dmesg | grep wfx)
		if [ -n "$wfx_loading" ]; then
			wfx_startup=$(dmesg | grep wfx | grep "wfx init done")
			if [ -n "$wfx_startup" ]; then
				wfx_driver_success=$(ifconfig wlan0)
				if [ -n "$wfx_driver_success" ]; then
					echo "Startup:  all OK, WFx part ready to act as wlan0"
					echo "Startup:  FW $(dmesg | grep WFM | grep Label)"
					pow=$(dmesg | grep "Power mode")
					echo "Startup:  $pow"
					echo "Startup:  current wlan0 status from 'iwconfig wlan0':"
					echo "$(iwconfig wlan0)"
				else
					printf "Startup:  ${RED}Error: WFx part not visible as wlan0${NO}\n"
					printf "${INV}$(dmesg | grep wfx)${NO}\n"
					echo "               Look at the complete dmesg to get more details"
					echo "               Contact Silicon Labs with a capture of the above information for assistance"
					exit 1
				fi
			else
				printf "Startup:  ${RED}Error: WFx part startup failed${NO}\n"
				wfx_startup_sdio=$(echo $wfx_loading | grep wfx-sdio)
				wfx_startup_spi=$(echo $wfx_loading | grep wfx-spi)
				wfx_startup_bus=$(wfx_bus)
				if [ -n "$wfx_startup_sdio" ]; then
					if [ "${wfx_startup_bus}" == "spi" ]; then
						printf "Startup  ${RED}Error: Driver starting as SDIO while bus mode is SPI${NO} ${INV}You need to reboot the Pi if you changed the bus selection${NO}\n"
					fi
				fi
				if [ -n "$wfx_startup_spi" ]; then
					if [ "${wfx_startup_bus}" == "sdio" ]; then
						printf "Startup   ${RED}Error: Driver starting as SPI while configured bus mode is SDIO${NO} ${INV}You need to reboot the Pi if you changed the bus selection${NO}\n"
					fi
					printf "Startup:  ${RED}Error: SPI startup failed.${NO}   ${INV}Is there an EVB attached to the Pi, with the bus selection switch set to 'SPI'?${NO}\n"
				fi
				wfx_startup_wrong_keyset=$(echo "$wfx_loading" | grep " keyset is incompatible")
				if [ -n "$wfx_startup_wrong_keyset" ]; then
						printf "Keyset    ${RED}Error: ($wfx_startup_wrong_keyset)${NO} ${INV}You need to 'sudo wfx_firmware_install' the correct keyset for your part${NO}\n"
				fi
				printf "== wfx dmesg information:\n"
				printf "${INV}$(dmesg | grep wfx)${NO}\n"
				printf "               Look at the complete dmesg to get more details\n"
				printf "               Contact Silicon Labs with a capture of the above information for assistance\n"
				exit 1
			fi
		fi
	else
		echo "Startup:  Waiting for user to use 'sudo wfx_driver_reload' to load the driver"
		exit 1
	fi
fi
if [ $startup_errors -gt 0 ]; then
	echo "Startup:  ERROR: There are $startup_errors error(s)!"
fi

