#!/bin/bash
# Copyright (c) 2018, Silicon Laboratories
# See license terms contained in COPYING file

set -e
. wfx_set_env
check_root

FIRMWARE_VER=$1
TYPE=$2

FIRMWARE_PATH="/lab_shared/firmware/wf200/wfm/Releases/"

if [ -z "$FIRMWARE_VER" ]; then
    echo "ERROR: specify a firmware version" >&2
    exit 1
fi

if [ ! -d "$FIRMWARE_PATH" ]; then
    echo "ERROR: cannot find directory $FIRMWARE_PATH" >&2
    exit 1
fi

FIRMWARE_PATH_VER="$(find $FIRMWARE_PATH -maxdepth 1 -type d -name *$FIRMWARE_VER*)"
[ "$(echo -n $FIRMWARE_PATH_VER | grep -c '')" != 1 ] && echo "ERROR: there is not exactly one directory for version $FIRMWARE_VER" >&2 && exit 1 || true

FW_DEV="$(find $FIRMWARE_PATH_VER -not -path *INTERNAL* -name wfm_wf200.sec)"
FW_INTERNAL="$(find $FIRMWARE_PATH_VER -path *INTERNAL* -name wfm_wf200.sec)"
FW_PUB="$(find $FIRMWARE_PATH_VER -name wfm_wf200_??.sec)"

[ "$(echo -n "$FW_DEV" | grep -c '')" != 1 ] && echo "ERROR: there is not exactly one file for DEV firmware: $FW_DEV" >&2 && exit 1 || true
[ "$(echo -n "$FW_INTERNAL" | grep -c '')" != 1 ] && echo "ERROR: there is not exactly one file for INTERNAL firmware: $FW_INTERNAL" >&2 && exit 1 || true

printf "Installing firmware %s\n" "$FIRMWARE_VER"
for INFILE in $FW_PUB; do
    INFILE_BASE=$(basename $INFILE)
    OUTFILE_BASE=${INFILE_BASE%.sec}-$FIRMWARE_VER.sec
    OUTFILE=/lib/firmware/$OUTFILE_BASE
    set -x
    cp $INFILE $OUTFILE
    ln -sfn $OUTFILE_BASE /lib/firmware/$INFILE_BASE
    { set +x; } 2>/dev/null # Disable traces without disturbing user
done

FW_DEV_OUTFILE=/lib/firmware/$(basename ${FW_DEV%.sec})_DEV-$FIRMWARE_VER.sec
FW_INTERNAL_OUTFILE=/lib/firmware/$(basename ${FW_INTERNAL%.sec})_INTERNAL-$FIRMWARE_VER.sec

set -x
cp $FW_DEV $FW_DEV_OUTFILE
cp $FW_INTERNAL $FW_INTERNAL_OUTFILE
{ set +x; } 2>/dev/null

case "$TYPE" in
    DEV)
	LINK_TARGET=$(basename $FW_DEV_OUTFILE)
    ;;
    INTERNAL)
	LINK_TARGET=$(basename $FW_INTERNAL_OUTFILE)
    ;;
    ??)
	LINK_TARGET=wfm_wf200_$TYPE.sec
	if ! [ -f /lib/firmware/$LINK_TARGET ]; then
	    echo "ERROR: cannot find firmware type $TYPE" >&2
	    exit 1
	fi
    ;;
    '')
	LINK_TARGET=''
    ;;
    *)
	echo "ERROR: type $TYPE not supported" >&2
	exit 1
    ;;
esac

set -x
# Remove link first in case of empty $TYPE
rm -f /lib/firmware/wfm_wf200.sec

! [ -z "$LINK_TARGET" ] && ln -sn $LINK_TARGET /lib/firmware/wfm_wf200.sec

echo "Success"
