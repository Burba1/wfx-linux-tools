#!/bin/bash

. wfx_set_env
check_root

PDS_SET=0

if [ $# == 0 ];
then
	echo "Select a PDS file from the following lists and call 'use_pds <pds>'..."
	. wfx_pdss
	exit 0
fi

. wfx_pdss  quiet
. wfx_colors

if [ ${model} == "Pi" ]; then
	if [ "${BOARD}" != "" ];
	then
		printf "Board info from hat eeprom: ${LGREEN}${BOARD}${NO}\n"
	fi
fi

if [ "${PDS_SET}" == 0 ];
then
	for pds in ${STORED_PDSS}
	do
		if [ "${1}" == "${pds}" ];
		then
			echo "  ${pds} is 'in store' (${STORED_PDS_PATH})"
			set -ex
			rm -f /lib/firmware/${PDS_FILE}
			ln -sf ${STORED_PDS_PATH}/${pds}   /lib/firmware/${PDS_FILE}
			set +ex
			PDS_SET=1
		fi
	done
fi

if [ "${PDS_SET}" == 0 ];
then
	for pds_listed in ${GIT_PDS_FILES}
	do
		if [ "${1}" == "${pds_listed}" ];
		then
			pds_in_test=$( echo "${pds_listed}" | grep pds.in )
			if [ "$pds_in_test" != "" ];
			then
				pds_in=${pds_listed}
				pds_out=$(echo ${pds_in} | sed -e 's\pds.in\pds\' )
				echo "  ${pds_in} is a pds.in file in GIT. Compressing it to ${STORED_PDS_PATH} as ${pds_out}"
				wfx_pds_compress ${GIT_PDS_DIR}/${pds_in}  ${STORED_PDS_PATH}/${pds_out}
				set -ex
				rm -f /lib/firmware/${PDS_FILE}
				ln -sf ${STORED_PDS_PATH}/${pds_out}   /lib/firmware/${PDS_FILE}
				set +ex
				PDS_SET=1
			fi
		fi
	done
fi

. wfx_pds
