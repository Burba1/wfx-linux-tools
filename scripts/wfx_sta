#!/bin/bash
# Copyright (c) 2018, Silicon Laboratories
# See license terms contained in COPYING file

set -euo pipefail
. wfx_set_env
check_root

USAGE="Usage: $(basename $0) OPTION

Start in station mode

Options:
  --help           display this message
  --ssid <ssid>    connect to <ssid>
  --pasword <pass> specify password
  --conf <file>    use specific wpa_supplicant.conf
  --interface <if> use interface instead of default wlan0
  --no-dhcp        do not enable DHCP client

If only --conf is used, the supplied file is supposed to contain the AP(s) to connect to.
If --ssid is used, $(basename $0) wait for the connection to be established.
"

error(){
    echo -e "ERROR\n$USAGE" >&2 && exit 1
}

SSID=""
PASSWD=""
CONF=""
INTERFACE="wlan0"
DHCP="true"

[ $# -eq 0 ] && error
LONGOPTS="help,ssid:,password:,conf:,interface:,no-dhcp"
! PARSED=$(getopt --options="" --longoptions=$LONGOPTS --name "$0" -- "$@")
[[ ${PIPESTATUS[0]} -ne 0 ]] && error
eval set -- "$PARSED"
while true; do
    case "$1" in
        --ssid)      SSID="$2";      shift ;;
        --password)  PASSWD="$2";    shift ;;
        --conf)      CONF="$2";      shift ;;
        --interface) INTERFACE="$2"; shift ;;
        --no-dhcp)   DHCP="false"          ;;
        --help)      echo "$USAGE";  exit 0 ;;
        --)          shift; break ;;
        *)           error ;;
    esac
    shift
done
[ $# -ne 0 ] && error

wpa_cli_run()
{
    COMMAND='wpa_cli -i $INTERFACE $@'
    if eval $COMMAND | grep FAIL; then
        echo "ERROR: $COMMAND failed"
        exit 1
    fi
}

check_interface "$INTERFACE"

# Enable DHCP client on this interface
if [ "$DHCP" = "true" ]; then
    dhcpcd --rebind "$INTERFACE"
else
    dhcpcd --release "$INTERFACE"
fi

# Start wpa_supplicant
killall --quiet --wait hostapd wpa_supplicant || true
if [ -z "$CONF" ]; then
    WPA_ARGS="-C /var/run/wpa_supplicant"
else
    WPA_ARGS="-c $CONF"
fi
wpa_supplicant -i "$INTERFACE" -Bs $WPA_ARGS

# Connect
if [ ! -z "$SSID" ]; then
    wpa_cli_run flush
    wpa_cli_run add_network
    wpa_cli_run set_network 0 ssid \"$SSID\"
    if [ -z "$PASSWD" ]; then
        wpa_cli_run set_network 0 key_mgmt NONE
    else
        wpa_cli_run set_network 0 psk \"$PASSWD\"
    fi
    wpa_cli_run select_network 0

    # Wait 10s for connection
    for n in {1..10}; do
        sleep 1
        if wpa_cli -i $INTERFACE status | grep wpa_state | grep -q COMPLETED; then
            echo "Associated"
            exit 0
        fi
    done
    echo "ERROR: Association timeout" >&2
    exit 1
fi
