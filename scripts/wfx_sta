#!/bin/bash
# Copyright (c) 2018, Silicon Laboratories
# See license terms contained in COPYING file

set -euo pipefail
. wfx_set_env
run_as_root

USAGE="Usage: $(basename $0) OPTION

Start in station mode

Options:
  --help               display this message
  --ssid <ssid>        connect to <ssid>
  --password <pass>    specify password
  --conf <file>        use specific wpa_supplicant.conf
  --interface <if>     use interface instead of default wlan0
  --no-dhcp            do not enable DHCP client (default is yes)
  --dhcp yes|no|ignore enable DHCP client
  --keep-supplicant    if any, use existing wpa_supplicant

If only --conf is used, the supplied file is supposed to contain the AP(s) to connect to.
If --ssid is used, $(basename $0) wait for the connection to be established.

Example:
  - use wlan0 to connect to the AP 'foo' with password 'bar' and get an IP via DHCP:
      $(basename $0) --ssid foo --password bar --dhcp yes
"

SSID=""
PASSWD=""
CONF=""
INTERFACE="wlan0"
DHCP="yes"
KEEP_SUPP="false"

[ $# -eq 0 ] && error
LONGOPTS="help,ssid:,password:,conf:,interface:,no-dhcp,dhcp:,keep-supplicant"
! PARSED=$(getopt --options="" --longoptions=$LONGOPTS --name "$0" -- "$@")
[[ ${PIPESTATUS[0]} -ne 0 ]] && error
eval set -- "$PARSED"
while true; do
    case "$1" in
        --ssid)      SSID="$2";      shift ;;
        --password)  PASSWD="$2";    shift ;;
        --conf)      CONF="$2";      shift ;;
        --interface) INTERFACE="$2"; shift ;;
        --no-dhcp)   DHCP="no"          ;;
        --dhcp)      DHCP="$2";      shift ;;
        --keep-supplicant) KEEP_SUPP="true" ;;
        --help)      echo "$USAGE";  exit 0 ;;
        --)          shift; break ;;
        *)           error ;;
    esac
    shift
done
[ $# -ne 0 ] && error

wpa_cli_run()
{
    COMMAND='wpa_cli -i $INTERFACE $@'
    if eval $COMMAND | grep FAIL; then
        echo "ERROR: $COMMAND failed"
        exit 1
    fi
}

check_interface "$INTERFACE"

case "$DHCP" in
    yes)
        echo "Asking dhcpcd to control $INTERFACE"
        ip addr flush dev "$INTERFACE"
        dhcpcd --rebind "$INTERFACE" 2>/dev/null
        ;;
    no)
        echo "Asking dhcpcd to release $INTERFACE"
        dhcpcd --release "$INTERFACE" 2>/dev/null
        ;;
    ignore)
        ;;
    *)
        echo "ERROR: invalid value for --dhcp: $DHCP"
        exit 1
        ;;
esac

if [ "$KEEP_SUPP" = "false" ];then
    killall --quiet --wait hostapd wpa_supplicant || true
fi

if ! pidof wpa_supplicant >/dev/null; then
    echo "Starting  wpa_supplicant"
    CONF_DIR=/tmp/wfx_sta/$INTERFACE
    rm -rf $CONF_DIR
    if [ -z "$CONF" ]; then
        mkdir -p $CONF_DIR
        echo "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev" > $CONF_DIR/wpa_supplicant.conf
        WPA_ARGS="-c $CONF_DIR/wpa_supplicant.conf"
    else
        WPA_ARGS="-c $CONF"
    fi
    wpa_supplicant -i "$INTERFACE" -Bs $WPA_ARGS
fi

echo "Setting up connection"
if [ ! -z "$SSID" ]; then
    wpa_cli_run flush
    wpa_cli_run add_network
    wpa_cli_run set_network 0 ssid \"$SSID\"
    if [ -z "$PASSWD" ]; then
        wpa_cli_run set_network 0 key_mgmt NONE
    else
        wpa_cli_run set_network 0 psk \"$PASSWD\"
    fi
    wpa_cli_run select_network 0

    echo "Waiting for connection"
    SUCCESS="false"
    for n in {1..10}; do
        sleep 1
        if echo "$(wpa_cli -i $INTERFACE status)" | grep wpa_state | grep -q COMPLETED; then
            SUCCESS="true"
            echo "Associated"
            break
        fi
    done
    [ "$SUCCESS" != true ] && error "Association timeout"

    if [ "$DHCP" = "yes" ]; then
        echo "Waiting for DHCP"
        SUCCESS="false"
        for n in {1..10}; do
            sleep 1
            if echo "$(wpa_cli -i $INTERFACE status)" | grep ip_address | grep -qv '169.254.'; then
                SUCCESS="true"
                echo "DHCP lease obtained"
                break
            fi
        done
        [ "$SUCCESS" != true ] && echo "DHCP timeout" >&2 && exit 1
    fi
fi

echo "Success"
